---
#
# This is the canonical configuration for the `README.md`
# Run `make readme` to rebuild the `README.md`
#

# Name of this project
name: Terraform AWS EC2 Autoscaling

# License of this project
license: "MIT"

# Canonical GitHub repo
github_repo: clouddrove/terraform-aws-ec2-autoscaling

# Badges to display
badges:
  - name: "Terraform"
    image: "https://img.shields.io/badge/Terraform-v0.15-green"
    url: "https://www.terraform.io"
  - name: "Licence"
    image: "https://img.shields.io/badge/License-MIT-blue.svg"
    url: "LICENSE.md"

#  description of this project
description: |-
  Terraform module will be created EC2 modulewith Autoscaling group.

# extra content
include:
  - "terraform.md"
usage: |-
  Here is examples of how you can use this module in your inventory structure:
  ###  On_Demand
  ```hcl
    module "ec2-autoscale" {
      enabled     = true
      name        = "ec2"
      environment = "test"
       label_order = ["environment", "name"]
       image_id                  = "ami-08bac620dc84221eb"
       iam_instance_profile_name = module.iam-role.name
       user_data_base64          = ""

      instance_type = "t2.nano"


      # on_dimand
      on_demand_enabled = true
      min_size          = 1
      desired_capacity  = 1
      max_size          = 2

      # schedule_instance
      schedule_enabled = true

      # up
      scheduler_up     = "0 8 * * MON-FRI"
      min_size_scaleup = 2
      scale_up_desired = 2
      max_size_scaleup = 3


      # down
      scheduler_down     = "0 22 * * MON-FRI"
      min_size_scaledown = 1
      scale_down_desired = 1
      max_size_scaledown = 2


      #volumes
      volume_type    = "standard"
      ebs_encryption = false
      kms_key_arn    = ""
      volume_size    = 20

      #Network
      associate_public_ip_address = true
      key_name                    = module.keypair.name
      subnet_ids                  = tolist(module.public_subnets.public_subnet_id)
      load_balancers              = []
      security_group_ids          = [module.ssh.security_group_ids, module.http-https.security_group_ids]
      min_elb_capacity            = 0
      target_group_arns           = []
      health_check_type           = "EC2"


      instance_initiated_shutdown_behavior = "terminate"
      enable_monitoring                    = true
      default_cooldown                     = 150
      force_delete                         = false
      termination_policies                 = ["Default"]
      suspended_processes                  = []
      enabled_metrics                      = ["GroupMinSize", "GroupMaxSize", "GroupDesiredCapacity", "GroupInServiceInstances", "GroupPendingInstances", "GroupStandbyInstances", "GroupTerminatingInstances", "GroupTotalInstances"]
      metrics_granularity                  = "1Minute"
      wait_for_capacity_timeout            = "15m"
      protect_from_scale_in                = false
      service_linked_role_arn              = ""


      scale_up_cooldown_seconds     = 150
      scale_up_scaling_adjustment   = 1
      scale_up_adjustment_type      = "ChangeInCapacity"
      scale_up_policy_type          = "SimpleScaling"
      scale_down_cooldown_seconds   = 300
      scale_down_scaling_adjustment = -1
      scale_down_adjustment_type    = "ChangeInCapacity"
      scale_down_policy_type        = "SimpleScaling"

      cpu_utilization_high_evaluation_periods = 2
      cpu_utilization_high_period_seconds     = 300
      cpu_utilization_high_threshold_percent  = 10
      cpu_utilization_high_statistic          = "Average"
      cpu_utilization_low_evaluation_periods  = 2
      cpu_utilization_low_period_seconds      = 180
      cpu_utilization_low_statistic           = "Average"
      cpu_utilization_low_threshold_percent   = 1
      }
  ```
  ### spot
  ```hcl
      module "ec2-autoscale" {
       enabled     = true
       name        = "ec2"
       environment = "test"
       label_order = ["environment", "name"]
       image_id    = "ami-0ceab0713d94f9276"
       iam_instance_profile_name = module.iam-role.name

        security_group_ids = [module.ssh.security_group_ids, module.http-https.security_group_ids]
        user_data_base64   = ""

        subnet_ids                              = tolist(module.public_subnets.public_subnet_id)
        spot_max_size                           = 3
        spot_min_size                           = 1
        spot_desired_capacity                   = 1
        spot_enabled                            = true
        on_demand_enabled                       = false
        scheduler_down                          = "0 19 * * MON-FRI"
        scheduler_up                            = "0 6 * * MON-FRI"
        spot_min_size_scaledown                 = 1
        spot_max_size_scaledown                 = 1
        spot_schedule_enabled                   = false
        spot_scale_down_desired                 = 1
        spot_scale_up_desired                   = 2
        max_price                               = "0.20"
        volume_size                             = 20
        ebs_encryption                          = false
        kms_key_arn                             = ""
        volume_type                             = "standard"
        spot_instance_type                      = "m5.large"
        associate_public_ip_address             = true
        instance_initiated_shutdown_behavior    = "terminate"
        key_name                                = module.keypair.name
        enable_monitoring                       = true
        load_balancers                          = []
        health_check_type                       = "EC2"
        target_group_arns                       = []
        default_cooldown                        = 150
        force_delete                            = false
        termination_policies                    = ["Default"]
        suspended_processes                     = []
        enabled_metrics                         = ["GroupMinSize", "GroupMaxSize", "GroupDesiredCapacity", "GroupInServiceInstances", "GroupPendingInstances", "GroupStandbyInstances", "GroupTerminatingInstances", "GroupTotalInstances"]
        metrics_granularity                     = "1Minute"
        wait_for_capacity_timeout               = "5m"
        protect_from_scale_in                   = false
        service_linked_role_arn                 = ""
        scale_up_cooldown_seconds               = 150
        scale_up_scaling_adjustment             = 1
        scale_up_adjustment_type                = "ChangeInCapacity"
        scale_up_policy_type                    = "SimpleScaling"
        scale_down_cooldown_seconds             = 300
        scale_down_scaling_adjustment           = -1
        scale_down_adjustment_type              = "ChangeInCapacity"
        scale_down_policy_type                  = "SimpleScaling"
        cpu_utilization_high_evaluation_periods = 2
        cpu_utilization_high_period_seconds     = 300
        cpu_utilization_high_threshold_percent  = 10
        cpu_utilization_high_statistic          = "Average"
        cpu_utilization_low_evaluation_periods  = 2
        cpu_utilization_low_period_seconds      = 180
        cpu_utilization_low_statistic           = "Average"
        cpu_utilization_low_threshold_percent   = 1
    }
  ```
